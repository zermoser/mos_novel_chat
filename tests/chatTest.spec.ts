import { test, expect } from '@playwright/test';

// await page.waitForTimeout(8000); // ‡∏£‡∏≠ 8‡∏ß‡∏¥ ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏•‡∏•‡∏¥‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

test.describe('NovelChatAppModule', () => {
  test.beforeEach(async ({ page }) => {
    await page.goto('/');
  });

  test('should display initial UI elements', async ({ page }) => {
    // Header verification
    await expect(page.getByTestId('app-title')).toHaveText('Novel Chat');
    await expect(page.getByTestId('app-subtitle')).toHaveText('‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏•‡∏≠‡∏ô ‡πÜ ‡∏Ç‡∏≠‡∏á Dev ‡∏ô‡∏≠‡∏ô‡∏ô‡πâ‡∏≠‡∏¢');

    // Initial messages
    await expect(page.getByTestId('system-message')).toContainText('‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô...');

    // Input area
    await expect(page.getByTestId('message-input')).toBeVisible();
    await expect(page.getByTestId('send-button')).toBeVisible();
  });

  test('should send and display user messages', async ({ page }) => {
    // Send message as first character
    await page.getByTestId('message-input').fill('‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö');
    await page.getByTestId('send-button').click();

    // Verify message appears
    await expect(page.locator('text=‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö').last()).toBeVisible();

    // Verify sender name in message header
    const lastMessageHeader = page.locator('[data-testid="message-header"]').last();
    await expect(lastMessageHeader).toContainText('‡∏°‡∏≠‡∏™');

    // ‡∏£‡∏≠‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤ message bubble ‡∏à‡∏∞‡∏õ‡∏£‡∏≤‡∏Å‡∏è
    const messageBubble = page.locator('.rounded-2xl:has-text("‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö")');
    await messageBubble.waitFor({ state: 'visible' });

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö class ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    const classes = await messageBubble.getAttribute('class');
    expect(classes).toContain('from-blue-400');
    expect(classes).toContain('to-indigo-500');
  });

  test('should switch between characters', async ({ page }) => {
    // Verify initial character
    await expect(page.getByTestId('current-character-name')).toHaveText('‡∏°‡∏≠‡∏™');

    // Switch to second character
    await page.getByTestId('next-character-button').click();
    await expect(page.getByTestId('current-character-name')).toHaveText('‡∏°‡∏≤‡∏¢‡∏≤');

    // Send message as second character
    await page.getByTestId('message-input').fill('‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞');
    await page.getByTestId('send-button').click();

    // Verify message appears
    await expect(page.locator('text=‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞').last()).toBeVisible();
    await expect(page.getByTestId('current-character-name')).toHaveText('‡∏°‡∏≤‡∏¢‡∏≤');
  });

  test('should add new character', async ({ page }) => {
    // Open settings
    await page.getByTestId('settings-button').click();
    await expect(page.getByTestId('settings-modal')).toBeVisible();

    // Open add character modal
    await page.getByTestId('add-character-button').click();
    await expect(page.getByTestId('character-modal')).toBeVisible();

    // Fill character details
    await page.getByTestId('character-id-input').fill('new-char');
    await page.getByTestId('character-name-input').fill('‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö');
    await page.getByTestId('character-avatar-input').fill('ü§ñ');
    await page.getByTestId('color-option-‡∏°‡πà‡∏ß‡∏á').click();
    await page.getByTestId('character-personality-input').fill('‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö');

    // Submit
    await page.getByTestId('save-character-button').click();

    // Verify new character appears
    await expect(page.getByTestId('character-card-new-char')).toBeVisible();

    // Close settings
    await page.getByTestId('close-settings-button').click();

    // Switch to new character (skip system character)
    await page.getByTestId('next-character-button').click(); // Move to Maya
    await page.getByTestId('next-character-button').click(); // Move to System
    await page.getByTestId('next-character-button').click(); // Move to New Character
    await expect(page.getByTestId('current-character-name')).toHaveText('‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö');

    // Send message as new character
    await page.getByTestId('message-input').fill('‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö');
    await page.getByTestId('send-button').click();

    // Verify message styling - use more specific selector
    const newMessageBubble = page.locator('.rounded-2xl:has-text("‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö")');
    await expect(newMessageBubble).toHaveClass(/from-purple-400/);
  });

  test('should edit character', async ({ page }) => {
    // Open settings
    await page.getByTestId('settings-button').click();

    // Open edit modal for Maya
    await page.getByTestId('character-card-2').hover();
    await page.getByTestId('edit-character-2').click();

    // Edit details
    await page.getByTestId('character-name-input').fill('‡∏°‡∏≤‡∏¢‡∏≤ (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß)');
    await page.getByTestId('color-option-‡∏™‡πâ‡∏°').click();
    await page.getByTestId('character-personality-input').fill('‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç');

    // Save changes
    await page.getByTestId('save-character-button').click();

    // Verify changes
    await expect(page.getByTestId('character-name-2')).toHaveText('‡∏°‡∏≤‡∏¢‡∏≤ (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß)');

    // Close settings
    await page.getByTestId('close-settings-button').click();

    // Switch to Maya (skip system character)
    await page.getByTestId('next-character-button').click(); // Move to Maya
    await expect(page.getByTestId('current-character-name')).toHaveText('‡∏°‡∏≤‡∏¢‡∏≤ (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß)');

    // Send message as Maya
    await page.getByTestId('message-input').fill('‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç');
    await page.getByTestId('send-button').click();

    // Verify styling changed - use more specific selector
    const editedMessageBubble = page.locator('.rounded-2xl:has-text("‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç")');
    await expect(editedMessageBubble).toHaveClass(/from-orange-400/);
  });

  test('should delete character', async ({ page }) => {
    // Add a character to delete (since initial characters are fixed)
    await page.getByTestId('settings-button').click();
    await page.getByTestId('add-character-button').click();
    await page.getByTestId('character-id-input').fill('temp-char');
    await page.getByTestId('character-name-input').fill('‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß');
    await page.getByTestId('character-avatar-input').fill('üëª');
    await page.getByTestId('color-option-‡πÄ‡∏ó‡∏≤').click();
    await page.getByTestId('character-personality-input').fill('‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö');
    await page.getByTestId('save-character-button').click();

    // Wait for character to be added before closing settings
    await expect(page.getByTestId('character-card-temp-char')).toBeVisible();
    await page.getByTestId('close-settings-button').click();

    // Switch to the temporary character
    await page.getByTestId('next-character-button').click(); // Maya
    await page.getByTestId('next-character-button').click(); // System
    await page.getByTestId('next-character-button').click(); // Temp character
    await expect(page.getByTestId('current-character-name')).toHaveText('‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß');

    // Open settings again
    await page.getByTestId('settings-button').click();

    // Set up dialog handler
    page.once('dialog', dialog => dialog.accept());

    // Delete the temporary character
    await page.getByTestId('delete-character-temp-char').click();

    // Wait for character card to be removed
    await expect(page.getByTestId('character-card-temp-char')).not.toBeAttached();
  });

  test('should update app settings', async ({ page }) => {
    // Open settings
    await page.getByTestId('settings-button').click();

    // Update app config
    await page.getByTestId('app-title-input').fill('‡πÅ‡∏≠‡∏õ‡πÉ‡∏´‡∏°‡πà');
    await page.getByTestId('app-subtitle-input').fill('‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà');

    // Toggle sound
    await page.getByTestId('toggle-sound-button').click();

    // Close settings
    await page.getByTestId('close-settings-button').click();

    // Verify changes
    await expect(page.getByTestId('app-title')).toHaveText('‡πÅ‡∏≠‡∏õ‡πÉ‡∏´‡∏°‡πà');
    await expect(page.getByTestId('app-subtitle')).toHaveText('‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà');
  });

  test('should prevent deleting system character', async ({ page }) => {
    // Open settings
    await page.getByTestId('settings-button').click();

    // Try to delete system character
    const systemCard = page.getByTestId('character-card-system');
    await systemCard.hover();
    await expect(page.getByTestId('delete-character-system')).not.toBeVisible();
  });

  test('should handle group conversation with time and location notifications', async ({ page }) => {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° 2 ‡∏ï‡∏±‡∏ß (‡∏£‡∏ß‡∏°‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô 2 ‡∏ï‡∏±‡∏ß ‡∏à‡∏∞‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î 4 ‡∏ï‡∏±‡∏ß)
    await page.getByTestId('settings-button').click();

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏ó‡∏µ‡πà 3
    await page.getByTestId('add-character-button').click();
    await page.getByTestId('character-id-input').fill('char3');
    await page.getByTestId('character-name-input').fill('‡∏ô‡∏±‡∏ó');
    await page.getByTestId('character-avatar-input').fill('üë®‚Äçüé§');
    await page.getByTestId('color-option-‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß').click();
    await page.getByTestId('character-personality-input').fill('‡∏®‡∏¥‡∏•‡∏õ‡∏¥‡∏ô‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏î‡∏µ');
    await page.getByTestId('save-character-button').click();

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏ó‡∏µ‡πà 4
    await page.getByTestId('add-character-button').click();
    await page.getByTestId('character-id-input').fill('char4');
    await page.getByTestId('character-name-input').fill('‡∏û‡∏•‡∏≠‡∏¢');
    await page.getByTestId('character-avatar-input').fill('üë©‚Äçüéì');
    await page.getByTestId('color-option-‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á').click();
    await page.getByTestId('character-personality-input').fill('‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏à‡∏≠‡∏°‡∏Ç‡∏¢‡∏±‡∏ô');
    await page.getByTestId('save-character-button').click();

    await page.getByTestId('close-settings-button').click();

    // ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ (‡∏™‡∏∏‡πà‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤)
    const locations = ['‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏°‡∏∏‡∏î‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢', '‡∏Ñ‡∏≤‡πÄ‡∏ü‡πà‡∏¢‡πà‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤', '‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞‡∏Å‡∏•‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡∏≠‡∏á', '‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤'];
    const times = ['üåû ‡πÄ‡∏ä‡πâ‡∏≤‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå‡∏ó‡∏µ‡πà‡∏™‡∏î‡πÉ‡∏™', 'üåÜ ‡∏¢‡∏≤‡∏°‡πÄ‡∏¢‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏®‡∏∏‡∏Å‡∏£‡πå', 'üåô ‡∏Ñ‡∏∑‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏™‡∏≤‡∏£‡πå‡∏≠‡∏±‡∏ô‡πÄ‡∏á‡∏µ‡∏¢‡∏ö‡∏™‡∏á‡∏ö', '‚òÄÔ∏è ‡∏ï‡∏≠‡∏ô‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå'];

    const randomLocation = locations[Math.floor(Math.random() * locations.length)];
    const randomTime = times[Math.floor(Math.random() * times.length)];
    const systemMessage1 = `${randomTime} ‡πÉ‡∏ô${randomLocation}`;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    const initialMessages = await page.locator('[data-testid^="message-bubble-"], [data-testid="system-message"]').count();

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    await page.evaluate((message) => {
      const messagesContainer = document.querySelector('[data-testid="messages-container"]');
      if (messagesContainer) {
        const systemMessage = document.createElement('div');
        systemMessage.innerHTML = `
        <div data-testid="system-message" class="flex justify-center my-2">
          <div class="bg-amber-50 border border-amber-200 text-amber-800 rounded-lg px-4 py-2 text-sm max-w-[90%] text-center">
            <p class="whitespace-pre-wrap">${message}</p>
          </div>
        </div>
      `;
        messagesContainer.appendChild(systemMessage);
      }
    }, systemMessage1);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∞‡∏ö‡∏ö
    await expect(page.locator(`text=${randomLocation}`).first()).toBeVisible();
    await expect(page.locator(`text=${randomTime.split(' ')[0]}`).first()).toBeVisible();

    // ‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏° - ‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏ó‡∏µ‡πà 1 (‡∏°‡∏≠‡∏™)
    await page.getByTestId('next-character-button').click(); // ‡πÑ‡∏õ‡∏°‡∏≠‡∏™
    await page.getByTestId('message-input').fill('‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÑ‡∏î‡πâ‡∏¢‡∏¥‡∏ô‡∏Ç‡πà‡∏≤‡∏ß‡∏•‡∏∑‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏°‡∏∏‡∏î‡∏ï‡∏≠‡∏ô‡∏î‡∏∂‡∏Å‡∏°‡∏±‡πâ‡∏¢?');
    await page.getByTestId('send-button').click();

    // ‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏ó‡∏µ‡πà 2 (‡∏°‡∏≤‡∏¢‡∏≤)
    await page.getByTestId('next-character-button').click(); // ‡πÑ‡∏õ‡∏°‡∏≤‡∏¢‡∏≤
    await page.getByTestId('message-input').fill('‡∏â‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏¢‡∏¥‡∏ô‡∏°‡∏≤‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ö‡∏≤‡∏á‡∏Ñ‡∏ô‡πÄ‡∏´‡πá‡∏ô‡πÄ‡∏á‡∏≤‡∏£‡∏π‡∏õ‡πÅ‡∏õ‡∏•‡∏Å‡πÜ ‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏°‡∏∏‡∏î‡∏ï‡∏≠‡∏ô‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏∑‡∏ô!');
    await page.getByTestId('send-button').click();

    // ‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏ó‡∏µ‡πà 3 (‡∏ô‡∏±‡∏ó)
    await page.getByTestId('next-character-button').click(); // ‡πÑ‡∏õ‡∏ô‡∏±‡∏ó
    await page.getByTestId('message-input').fill('‡πÑ‡∏°‡πà‡∏ô‡∏∞! ‡∏ú‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡∏≠‡∏ô‡∏î‡∏∂‡∏Å‡∏ö‡πà‡∏≠‡∏¢‡πÜ ‡∏ô‡∏∞‡πÄ‡∏ô‡∏µ‡πà‡∏¢ üò±');
    await page.getByTestId('send-button').click();

    // ‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏ó‡∏µ‡πà 4 (‡∏û‡∏•‡∏≠‡∏¢)
    await page.getByTestId('next-character-button').click(); // ‡πÑ‡∏õ‡∏û‡∏•‡∏≠‡∏¢
    await page.getByTestId('message-input').fill('‡∏â‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡∏ô‡∏±‡πâ‡∏ô‡∏´‡∏£‡∏≠‡∏Å ‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏Ñ‡πà‡πÅ‡∏™‡∏á‡πÄ‡∏á‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥');
    await page.getByTestId('send-button').click();

    // ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
    const newTimes = ['üåô ‡∏î‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß... ‡πÉ‡∏Å‡∏•‡πâ‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏¥‡∏î', 'üåÉ ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏î‡∏∂‡∏Å‡∏°‡∏≤‡∏Å‡πÅ‡∏•‡πâ‡∏ß', 'üïõ ‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏∑‡∏ô‡∏û‡∏≠‡∏î‡∏µ', 'üåå ‡πÄ‡∏ß‡∏•‡∏≤‡∏î‡∏∂‡∏Å‡∏™‡∏á‡∏±‡∏î'];
    const newRandomTime = newTimes[Math.floor(Math.random() * newTimes.length)];
    const systemMessage2 = newRandomTime;

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    await page.evaluate((message) => {
      const messagesContainer = document.querySelector('[data-testid="messages-container"]');
      if (messagesContainer) {
        const systemMessage = document.createElement('div');
        systemMessage.innerHTML = `
        <div data-testid="system-message" class="flex justify-center my-2">
          <div class="bg-amber-50 border border-amber-200 text-amber-800 rounded-lg px-4 py-2 text-sm max-w-[90%] text-center">
            <p class="whitespace-pre-wrap">${message}</p>
          </div>
        </div>
      `;
        messagesContainer.appendChild(systemMessage);
      }
    }, systemMessage2);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà
    await expect(page.locator(`text=${newRandomTime.split(' ')[0]}`).last()).toBeVisible();

    // ‡∏°‡∏≠‡∏™‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    await page.getByTestId('next-character-button').click(); // ‡πÑ‡∏õ‡∏°‡∏≠‡∏™
    await page.getByTestId('message-input').fill('‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡∏¢‡∏¥‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏õ‡∏£‡∏∞‡∏´‡∏•‡∏≤‡∏î‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏ä‡∏±‡πâ‡∏ô‡∏ö‡∏ô‡∏î‡πâ‡∏ß‡∏¢... ‡πÉ‡∏Ñ‡∏£‡∏à‡∏∞‡πÑ‡∏õ‡∏î‡∏π‡∏°‡∏±‡πâ‡∏¢?');
    await page.getByTestId('send-button').click();

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô
    const finalMessages = await page.locator('[data-testid^="message-bubble-"], [data-testid="system-message"]').count();
    expect(finalMessages).toBe(initialMessages + 7); // 7 ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
    await expect(page.locator('text=‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏õ‡∏£‡∏∞‡∏´‡∏•‡∏≤‡∏î').last()).toBeVisible();

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏µ 2 ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà
    const newSystemMessages = await page.locator('[data-testid="system-message"]').count();
    expect(newSystemMessages).toBeGreaterThanOrEqual(2);
  });
});